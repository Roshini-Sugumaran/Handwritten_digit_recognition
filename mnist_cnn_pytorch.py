# -*- coding: utf-8 -*-
"""MNIST_cnn_PyTorch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aIiV7vOwBGEn813MnFkQE72JLQ9i-4eo
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torch.backends.cudnn as cudnn
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
from PIL import Image
from tempfile import TemporaryDirectory

from google.colab import drive

# Step 2: Mount Google Drive
drive.mount('/content/drive')

from tensorflow.keras.datasets import mnist


# Define the data transformation (only ToTensor)
data_transforms = {
    'train': transforms.Compose([
        transforms.ToTensor()  # Only convert to tensor
    ]),
    'val': transforms.Compose([
        transforms.ToTensor()  # Only convert to tensor
    ]),
}

# Load MNIST data using keras.datasets
(train_images, train_labels), (val_images, val_labels) = mnist.load_data()

# Convert numpy arrays to torch tensors by adding a channel dimension
train_images = np.expand_dims(train_images, axis=-1)  # Add channel dimension for grayscale
val_images = np.expand_dims(val_images, axis=-1)

# Custom dataset class to apply the ToTensor transformation
class MNISTDataset(torch.utils.data.Dataset):
    def __init__(self, images, labels, transform=None):
        self.images = images
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        image = self.images[idx]
        label = self.labels[idx]

        if self.transform:
            image = self.transform(image)

        return image, label

# Create datasets using the custom dataset class
image_datasets = {
    'train': MNISTDataset(train_images, train_labels, transform=data_transforms['train']),
    'val': MNISTDataset(val_images, val_labels, transform=data_transforms['val'])
}

# Create the data loaders
dataloaders = {
    x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4, shuffle=True, num_workers=4)
    for x in ['train', 'val']
}

# Determine the sizes of the datasets
dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}

# Get class names (0-9 digits)
class_names = list(range(10))

# Determine the device (CUDA if available, otherwise CPU)
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

def imshow(inp, title=None):
    """Display image for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))  # Change tensor to HWC format for matplotlib

    # If the image has 1 channel (grayscale), remove the last dimension
    if inp.shape[2] == 1:
        inp = inp.squeeze(-1)
        plt.imshow(inp, cmap='gray')
    else:
        plt.imshow(inp)

    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated

# Get a batch of training data
inputs, classes = next(iter(dataloaders['train']))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

# Display the batch of images with labels
imshow(out, title=[class_names[x] for x in classes])

def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    since = time.time()

    # Create a temporary directory to save training checkpoints
    with TemporaryDirectory() as tempdir:
        best_model_params_path = os.path.join(tempdir, 'best_model_params.pt')

        torch.save(model.state_dict(), best_model_params_path)
        best_acc = 0.0

        for epoch in range(num_epochs):
            print(f'Epoch {epoch}/{num_epochs - 1}')
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    model.train()  # Set model to training mode
                else:
                    model.eval()   # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for inputs, labels in dataloaders[phase]:
                    inputs = inputs.to(device)
                    labels = labels.to(device)

                    # Zero the parameter gradients
                    optimizer.zero_grad()

                    # Forward pass
                    with torch.set_grad_enabled(phase == 'train'):
                        outputs = model(inputs)
                        _, preds = torch.max(outputs, 1)
                        loss = criterion(outputs, labels)

                        # Backward pass + optimize only in training phase
                        if phase == 'train':
                            loss.backward()
                            optimizer.step()

                    # Update statistics
                    running_loss += loss.item() * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)

                if phase == 'train':
                    scheduler.step()

                # Compute epoch statistics
                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects.double() / dataset_sizes[phase]

                print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

                # Deep copy the model if it has the best accuracy so far
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    torch.save(model.state_dict(), best_model_params_path)

            print()

        # Training completion time
        time_elapsed = time.time() - since
        print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')
        print(f'Best val Acc: {best_acc:4f}')

        # Load best model weights
        model.load_state_dict(torch.load(best_model_params_path))

    return model

def visualize_model(model, num_images=6):
    was_training = model.training
    model.eval()
    images_so_far = 0
    fig = plt.figure(figsize=(10, 10))  # Adjust figure size for better clarity

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloaders['val']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images // 2, 2, images_so_far)
                ax.axis('off')
                ax.set_title(f'Predicted: {class_names[preds[j]]}')
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)

# Load a pre-trained ResNet18 model
model_ft = models.resnet18(weights='IMAGENET1K_V1')

# Modify the first convolutional layer to accept 1-channel (grayscale) images instead of 3-channel (RGB)
model_ft.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3, bias=False)

# Modify the final fully connected layer to output 10 classes (for MNIST)
num_ftrs = model_ft.fc.in_features
model_ft.fc = nn.Linear(num_ftrs, 10)

# Move the model to the appropriate device (GPU or CPU)
model_ft = model_ft.to(device)

# Define the loss function (Cross-Entropy Loss is typical for classification tasks)
criterion = nn.CrossEntropyLoss()

# Set up the optimizer (SGD with momentum)
optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

# Set up a learning rate scheduler that decays the learning rate by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                       num_epochs=5)

visualize_model(model_ft)